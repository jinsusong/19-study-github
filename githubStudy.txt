github  start 
분산형 협업 도구  github

1.저장소 만들기 
new repository 클릭
//하나의 프로젝트가 담기는 공간
//public 을 선택해야 open source 가 된다
//gitignore : 파일이 올라갈때 어떤걸 올리지 않을지 설정 ,,, 환경설정을 걸러주는 용도로 많이 사용
//license : 어떤 라이센스를 사용하는지 명시해준다.. 필수는 아님

2. git-csm.com 에서 git 다운로드 
// 설치는 기본 설정을 따르면 디폴트로 알아서 다운로드 된다. next -> next -> next
//git 명령어를 사용하면 cmd 창에서 명령어 사용 가능

3. git --version
//버전 확인

4. git 환경설정
//git 과 연결하고 로컬 컴퓨터를 저장소로 사용하기 위해 환경설정해준다.
git config --global user.name (github 계정)
git config --global user.email (github 이메일)

5. 로컬에 폴더 하나 생성
// cmd 창에서 cd 이용해서 로컬 폴더로 경로 이동 

6.git clone (https://github.com/jinsusong/깃주소) 
//clone 다운로드라고 생각하면 됩니다.

7. .git 이랑 동일한 위치에 text 파일 생성 

8. clone한 폴더로 다시 이동 해준다 .
// C:\Education\Git-Tutorial> git add document.txt
// git add 를 사용해서 파일을 추가해준다

9.git commit -m "Add Text File [document.txt] " 
//커밋 메세지를 담아서 커밋을 진행한다.
//commit을 해서 로컬 컴퓨터에는 적용이 되어있다
//git 에는 안올라가있음

10.git push 
//명령어를 사용하면 원격저장소인 git 에 올라간다 .
//사이트를 새로고침하면 올라감 



git commit --amend
// commit 메세지 수정

git reset file.ext
//staging에 올린 파일 내리기

git checkout 
//수정한 내용 원래대로 돌리기

git log
//commit 내역 확인하기

git reset --hard (해시값)
//hard 붙이면 특정 위치 이후는 다 제거한다 
//soft 는 돌아가도 내역 유지하기

git push -f
//강제로 push

git branch
//브랜치 확인하기 

git branch develop
//dev 브렌치 생성하기 

git checkout develop
//브렌치 이동하기 




-----------------------------------------------------------------------

기본적으로 깃 프로젝트에 담겨 이쓴ㄴ 데이터들은 파일 시스템 상에서의 스냅샷이라고 볼 수 있습니다.
실제로 프로젝트를 커밋하여 적용할 때의 순간을 중요시한다는 특징이 있습니다. 
파일 자체를 저장하기보다 수정 내역 자체를 저장합니다.

git 프로젝트의 세 가지 구성요소

Working Directory: 작업할 파일이 있는 디렉토리
Staging Area: 커밋을 수행할 파일들이 올라가는 영역
Git Directory: Git 프로젝트의 메타 데이터와 데이터 정보가 저장되는 디렉토리


Working Directory 
-> git add
	Staging Area
	->git commit
		Local Repository
		-> git push
			Remote Repository
			<- git fetch
< - - - - - - - - - -  git merge
자신이 수정한 내역을 다시 원격지 저장소까지 반영하려면 git add, git commit, git push의 과정을 수행
다시 저장소로부터 수정된 내역을 받을 때에는 git fetch 수행
과정에서 내가 수정한 내역이 원격지 저장소에 있는 내역과 가를 수 있기 때문에 git merge를 수행하여 자신의 컴퓨터에 있는 소스코드를 원격지 저장소와 맞추는 것

git fetch와 git merge를 한 번에 사용하는 명령어인 git pull을 사용

저장소(Repository)
저장소 Repo는 실제 소스코드가 담겨 있으면서 커밋 내역 등의 모든 작업 이력이 담겨 있는 공간을 의미함
작업 이력은 git 폴더에 담김 환경설정과 관련된 폴더임

어떤 파일을 commit 하게 되면 각 작업들을 분류하기 위해 내부적으로 해당 작업에 대한 해시 값을 이용
일반적으로 해시 값은 충돌이 발생하지 않기 때문에 정확히 커밋 내역들을 관리할 수 있습니다.

-----------------------------------------------------------------------------------------------------------------------

commit 내역 수정해서 되돌리기

git pull 
깃 저장소와 로컬 저장소를 일치하게 만든다 .

특정 지역으로 프로젝트를 되돌리기 

git log
//내역 확인하기

git reset --hard (해시값)
//hard 붙이면 특정 위치 이후는 다 제거한다 
//soft 는 돌아가도 내역 유지하기

특정지역으로 돌아갔으면 원격 저장소도 같이 맞춰줘야하는데 
강제로 push

git push -f
 
------------------------------------------------------------------------------------------------------------------------------
브렌치 
동시에 여러 개발자들이 프로젝트에서 각기 다른 기능을 개발할 수 있도록 하는 기능 
서로에게 영향을 받지 않는다 .

깃을 생성하면 마스터가 생성된다. 배포버전 자동생성

git branch
//브랜치 확인하기 

git branch develop
//dev 브렌치 생성하기 

git checkout develop
//브렌치 이동하기 

마스터에서 devel 소스 합치기 
git checkout master
git merge develop

git push
//원격지에 반영하기 

git branch -d develop
//브렌치 삭제하기 

===================================================================

merge 시에 발생하는 충돌 해결하기

================================================================
원격저장소 관리하기 

git remote
현재 원격저장소로 등록되어 있는게 뭔지 확인할 수 있음
orgin 

git remote show orgin 
특정 원격 저장소 정보 상세보기 

git remote add origin2 https://github.com/jinsusong
//원격 저장소 추가

git remote -v 
//전제 저장소 목록 확인

git remote rename origin temp
//원격 저장소 이름 바꾸기 

git remote rm temp
//저장소 제거

====================================================================
git log 관리하기 

git 처리 내역 history를 관리하기

git log 
//최신 순서대로 내역 출력 

git log --stat
// 각 커밋에 대한 상세 정보 출력

git log --graph
//병합정보를 그래프로 확인가능

git log -p 3
//커밋에 적용된 항목 출력

git log --pretty=online
//커밋 정보 지정 형태로 출력

git log --pretty=format:"%h -> %an, %ar : %s" --graph
//해시값 출력, 작성자, 날짜, 주제, 그래프와 함께
=================================================================
프로젝트 소개글
README.md

문법
#글머리 크기 
## 일반적으로 2개 많이 사용
###
####
#####

```c
소스 코드 작성하기
```

변환되서 보임

링크는 다음과 같이 작성
[블로그 주소](https://blog.naver.com)

순서 없는 목록은 다음과 같이 작성
* 
  *
  *
     *
     *

인용 구문 작성
> "공부합십낟" -송진수

테이블 작성하기 
이름 | 영어|정보|수학
---|---|---|---|---|


강조는 다음과 같이
**강조**  ~~취소선~~

===============================================================
git 프로젝트에서 아카이브로 만들기 

git archive --format=zip master -o Master.zip 
소스코드 파일만 다른사람에게 건내주고 싶을때 만들어서 주면된다 .

=================================================
commit 메세지 수정하기 

git init 
//초기화

git rebase -i HEAD~3
//reword 사용 -- 메세지만 교체 

나오면 바로 어떤식으로 교체할지 화면이 뜬다 

git rebase -i 해시값
//넣어준 커밋값 위로 전부 확인 

커밋 제거하기 
//drop 키워드 

==========================================================
git config  환경설정

git config --list
//깃 설정 확인하기 

git config --global user.name " " 
git config --global user.email " "


git config --list
해당 이름으로 자동 커밋이 된다 .

cd~
cat .gitconfig
환경설정 파일입니다.

===========================================================
git commit 날짜 변경하기 

git add
git commit -m 
git log

git rebase -i 이전커밋해시값 

pick -> edit 
으로 수정
 
나오면
GIT_COMMITER_DATE="Oct 1 10:00:00 2018 +0000" git commit --amend -no-edit --date "Oct 1 10:00:00 2018 +0000"

날짜변경 두번째 방법 필터링
git filter-branch -f --env-filter \
'if [ $GIT_COMMIT = 해시값 ]
 then
  export GIT_AUTHOR_DATE="Mon Oct 1 10:00:00 2018 +0000"
  export GIT_COMMITER_DATE="Mon Oct 1 10:00:00 2018 +0000"
 if'

git log



